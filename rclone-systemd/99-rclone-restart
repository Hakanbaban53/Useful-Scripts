#!/bin/bash
# 99-rclone-restart - NetworkManager Dispatcher Script for Rclone Mount
# Automatically starts or stops the rclone mount service based on network events.

interface=$1
status=$2
logfile="/var/log/rclone-dispatcher.log"
rclone_service="rclone-mount.service"

# ANSI color codes
RESET="\033[0m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
CYAN="\033[36m"

log() {
    local message=$1
    local level=$2
    local color=$3
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - ${color}${level}${RESET}: ${message}" | tee -a $logfile
}

# Exclude virtual interfaces
excluded_interfaces=("lo" "tun*" "vnet*" "virbr*" "docker*" "br-*" "vmnet*" "wg*")

# Check if the interface is excluded
is_excluded_interface() {
    for pattern in "${excluded_interfaces[@]}"; do
        if [[ "$interface" == $pattern ]] || [[ "$interface" == ${pattern} ]]; then
            return 0
        fi
    done
    return 1
}

# Exit if it's an excluded interface
if is_excluded_interface; then
    log "Skipping event for excluded interface: $interface" "INFO" "$CYAN"
    exit 0
fi

# Function to check network connectivity across all interfaces
is_network_connected() {
    if host -W 1 google.com &>/dev/null || ping -c 1 -W 1 8.8.8.8 &>/dev/null; then
        return 0
    fi
    return 1
}

if [ "$status" = "up" ]; then
    log "Network status 'up' detected on interface $interface. Checking network connectivity..." "INFO" "$CYAN"
    if is_network_connected; then
        log "Network is connected. Starting $rclone_service..." "SUCCESS" "$GREEN"
        systemctl start $rclone_service
        if [ $? -eq 0 ]; then
            log "$rclone_service started successfully." "SUCCESS" "$GREEN"
        else
            log "Failed to start $rclone_service." "ERROR" "$RED"
        fi
    else
        log "Network is not fully connected. Skipping service start." "WARNING" "$YELLOW"
    fi
elif [ "$status" = "down" ]; then
    log "Network status 'down' detected on interface $interface. Checking overall network connectivity..." "INFO" "$CYAN"
    if ! is_network_connected; then
        log "No active network connections. Stopping $rclone_service..." "INFO" "$CYAN"
        systemctl stop $rclone_service
        if [ $? -eq 0 ]; then
            log "$rclone_service stopped successfully." "SUCCESS" "$GREEN"
        else
            log "Failed to stop $rclone_service." "ERROR" "$RED"
        fi
    else
        log "Other network connections are active. Keeping $rclone_service running." "INFO" "$CYAN"
    fi
else
    log "Unknown network status: $status on interface $interface. No action taken." "WARNING" "$YELLOW"
fi
